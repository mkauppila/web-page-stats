//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for GetReactionsCategorySlugParamsCategory.
const (
	GetReactionsCategorySlugParamsCategoryArticles GetReactionsCategorySlugParamsCategory = "articles"
	GetReactionsCategorySlugParamsCategorySnippets GetReactionsCategorySlugParamsCategory = "snippets"
)

// Defines values for PutReactionsReactionCategorySlugParamsReaction.
const (
	Like      PutReactionsReactionCategorySlugParamsReaction = "like"
	Love      PutReactionsReactionCategorySlugParamsReaction = "love"
	Mindblown PutReactionsReactionCategorySlugParamsReaction = "mindblown"
	Puzzling  PutReactionsReactionCategorySlugParamsReaction = "puzzling"
)

// Defines values for PutReactionsReactionCategorySlugParamsCategory.
const (
	PutReactionsReactionCategorySlugParamsCategoryArticles PutReactionsReactionCategorySlugParamsCategory = "articles"
	PutReactionsReactionCategorySlugParamsCategorySnippets PutReactionsReactionCategorySlugParamsCategory = "snippets"
)

// Defines values for GetViewsCategorySlugParamsCategory.
const (
	GetViewsCategorySlugParamsCategoryArticles GetViewsCategorySlugParamsCategory = "articles"
	GetViewsCategorySlugParamsCategorySnippets GetViewsCategorySlugParamsCategory = "snippets"
)

// Defines values for PutViewsCategorySlugParamsCategory.
const (
	PutViewsCategorySlugParamsCategoryArticles PutViewsCategorySlugParamsCategory = "articles"
	PutViewsCategorySlugParamsCategorySnippets PutViewsCategorySlugParamsCategory = "snippets"
)

// GetReactionsCategorySlugParamsCategory defines parameters for GetReactionsCategorySlug.
type GetReactionsCategorySlugParamsCategory string

// PutReactionsReactionCategorySlugParamsReaction defines parameters for PutReactionsReactionCategorySlug.
type PutReactionsReactionCategorySlugParamsReaction string

// PutReactionsReactionCategorySlugParamsCategory defines parameters for PutReactionsReactionCategorySlug.
type PutReactionsReactionCategorySlugParamsCategory string

// GetViewsCategorySlugParamsCategory defines parameters for GetViewsCategorySlug.
type GetViewsCategorySlugParamsCategory string

// PutViewsCategorySlugParamsCategory defines parameters for PutViewsCategorySlug.
type PutViewsCategorySlugParamsCategory string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get reaction counts
	// (GET /reactions/{category}/{slug})
	GetReactionsCategorySlug(w http.ResponseWriter, r *http.Request, category GetReactionsCategorySlugParamsCategory, slug string)
	// Increment reaction count
	// (PUT /reactions/{reaction}/{category}/{slug})
	PutReactionsReactionCategorySlug(w http.ResponseWriter, r *http.Request, reaction PutReactionsReactionCategorySlugParamsReaction, category PutReactionsReactionCategorySlugParamsCategory, slug string)
	// Get view count
	// (GET /views/{category}/{slug})
	GetViewsCategorySlug(w http.ResponseWriter, r *http.Request, category GetViewsCategorySlugParamsCategory, slug string)
	// Increment view count
	// (PUT /views/{category}/{slug})
	PutViewsCategorySlug(w http.ResponseWriter, r *http.Request, category PutViewsCategorySlugParamsCategory, slug string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetReactionsCategorySlug operation middleware
func (siw *ServerInterfaceWrapper) GetReactionsCategorySlug(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "category" -------------
	var category GetReactionsCategorySlugParamsCategory

	err = runtime.BindStyledParameterWithOptions("simple", "category", r.PathValue("category"), &category, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category", Err: err})
		return
	}

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReactionsCategorySlug(w, r, category, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutReactionsReactionCategorySlug operation middleware
func (siw *ServerInterfaceWrapper) PutReactionsReactionCategorySlug(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "reaction" -------------
	var reaction PutReactionsReactionCategorySlugParamsReaction

	err = runtime.BindStyledParameterWithOptions("simple", "reaction", r.PathValue("reaction"), &reaction, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reaction", Err: err})
		return
	}

	// ------------- Path parameter "category" -------------
	var category PutReactionsReactionCategorySlugParamsCategory

	err = runtime.BindStyledParameterWithOptions("simple", "category", r.PathValue("category"), &category, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category", Err: err})
		return
	}

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutReactionsReactionCategorySlug(w, r, reaction, category, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetViewsCategorySlug operation middleware
func (siw *ServerInterfaceWrapper) GetViewsCategorySlug(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "category" -------------
	var category GetViewsCategorySlugParamsCategory

	err = runtime.BindStyledParameterWithOptions("simple", "category", r.PathValue("category"), &category, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category", Err: err})
		return
	}

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetViewsCategorySlug(w, r, category, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutViewsCategorySlug operation middleware
func (siw *ServerInterfaceWrapper) PutViewsCategorySlug(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "category" -------------
	var category PutViewsCategorySlugParamsCategory

	err = runtime.BindStyledParameterWithOptions("simple", "category", r.PathValue("category"), &category, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "category", Err: err})
		return
	}

	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", r.PathValue("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "slug", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutViewsCategorySlug(w, r, category, slug)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/reactions/{category}/{slug}", wrapper.GetReactionsCategorySlug)
	m.HandleFunc("PUT "+options.BaseURL+"/reactions/{reaction}/{category}/{slug}", wrapper.PutReactionsReactionCategorySlug)
	m.HandleFunc("GET "+options.BaseURL+"/views/{category}/{slug}", wrapper.GetViewsCategorySlug)
	m.HandleFunc("PUT "+options.BaseURL+"/views/{category}/{slug}", wrapper.PutViewsCategorySlug)

	return m
}

type GetReactionsCategorySlugRequestObject struct {
	Category GetReactionsCategorySlugParamsCategory `json:"category"`
	Slug     string                                 `json:"slug"`
}

type GetReactionsCategorySlugResponseObject interface {
	VisitGetReactionsCategorySlugResponse(w http.ResponseWriter) error
}

type GetReactionsCategorySlug200JSONResponse struct {
	Like      *int `json:"like,omitempty"`
	Love      *int `json:"love,omitempty"`
	Mindblown *int `json:"mindblown,omitempty"`
	Puzzling  *int `json:"puzzling,omitempty"`
}

func (response GetReactionsCategorySlug200JSONResponse) VisitGetReactionsCategorySlugResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutReactionsReactionCategorySlugRequestObject struct {
	Reaction PutReactionsReactionCategorySlugParamsReaction `json:"reaction"`
	Category PutReactionsReactionCategorySlugParamsCategory `json:"category"`
	Slug     string                                         `json:"slug"`
}

type PutReactionsReactionCategorySlugResponseObject interface {
	VisitPutReactionsReactionCategorySlugResponse(w http.ResponseWriter) error
}

type PutReactionsReactionCategorySlug200JSONResponse struct {
	Like      *int `json:"like,omitempty"`
	Love      *int `json:"love,omitempty"`
	Mindblown *int `json:"mindblown,omitempty"`
	Puzzling  *int `json:"puzzling,omitempty"`
}

func (response PutReactionsReactionCategorySlug200JSONResponse) VisitPutReactionsReactionCategorySlugResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetViewsCategorySlugRequestObject struct {
	Category GetViewsCategorySlugParamsCategory `json:"category"`
	Slug     string                             `json:"slug"`
}

type GetViewsCategorySlugResponseObject interface {
	VisitGetViewsCategorySlugResponse(w http.ResponseWriter) error
}

type GetViewsCategorySlug200JSONResponse struct {
	Views *int `json:"views,omitempty"`
}

func (response GetViewsCategorySlug200JSONResponse) VisitGetViewsCategorySlugResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutViewsCategorySlugRequestObject struct {
	Category PutViewsCategorySlugParamsCategory `json:"category"`
	Slug     string                             `json:"slug"`
}

type PutViewsCategorySlugResponseObject interface {
	VisitPutViewsCategorySlugResponse(w http.ResponseWriter) error
}

type PutViewsCategorySlug200JSONResponse struct {
	Views *int `json:"views,omitempty"`
}

func (response PutViewsCategorySlug200JSONResponse) VisitPutViewsCategorySlugResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get reaction counts
	// (GET /reactions/{category}/{slug})
	GetReactionsCategorySlug(ctx context.Context, request GetReactionsCategorySlugRequestObject) (GetReactionsCategorySlugResponseObject, error)
	// Increment reaction count
	// (PUT /reactions/{reaction}/{category}/{slug})
	PutReactionsReactionCategorySlug(ctx context.Context, request PutReactionsReactionCategorySlugRequestObject) (PutReactionsReactionCategorySlugResponseObject, error)
	// Get view count
	// (GET /views/{category}/{slug})
	GetViewsCategorySlug(ctx context.Context, request GetViewsCategorySlugRequestObject) (GetViewsCategorySlugResponseObject, error)
	// Increment view count
	// (PUT /views/{category}/{slug})
	PutViewsCategorySlug(ctx context.Context, request PutViewsCategorySlugRequestObject) (PutViewsCategorySlugResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetReactionsCategorySlug operation middleware
func (sh *strictHandler) GetReactionsCategorySlug(w http.ResponseWriter, r *http.Request, category GetReactionsCategorySlugParamsCategory, slug string) {
	var request GetReactionsCategorySlugRequestObject

	request.Category = category
	request.Slug = slug

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetReactionsCategorySlug(ctx, request.(GetReactionsCategorySlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReactionsCategorySlug")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetReactionsCategorySlugResponseObject); ok {
		if err := validResponse.VisitGetReactionsCategorySlugResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutReactionsReactionCategorySlug operation middleware
func (sh *strictHandler) PutReactionsReactionCategorySlug(w http.ResponseWriter, r *http.Request, reaction PutReactionsReactionCategorySlugParamsReaction, category PutReactionsReactionCategorySlugParamsCategory, slug string) {
	var request PutReactionsReactionCategorySlugRequestObject

	request.Reaction = reaction
	request.Category = category
	request.Slug = slug

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutReactionsReactionCategorySlug(ctx, request.(PutReactionsReactionCategorySlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutReactionsReactionCategorySlug")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutReactionsReactionCategorySlugResponseObject); ok {
		if err := validResponse.VisitPutReactionsReactionCategorySlugResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetViewsCategorySlug operation middleware
func (sh *strictHandler) GetViewsCategorySlug(w http.ResponseWriter, r *http.Request, category GetViewsCategorySlugParamsCategory, slug string) {
	var request GetViewsCategorySlugRequestObject

	request.Category = category
	request.Slug = slug

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetViewsCategorySlug(ctx, request.(GetViewsCategorySlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetViewsCategorySlug")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetViewsCategorySlugResponseObject); ok {
		if err := validResponse.VisitGetViewsCategorySlugResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutViewsCategorySlug operation middleware
func (sh *strictHandler) PutViewsCategorySlug(w http.ResponseWriter, r *http.Request, category PutViewsCategorySlugParamsCategory, slug string) {
	var request PutViewsCategorySlugRequestObject

	request.Category = category
	request.Slug = slug

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutViewsCategorySlug(ctx, request.(PutViewsCategorySlugRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutViewsCategorySlug")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutViewsCategorySlugResponseObject); ok {
		if err := validResponse.VisitPutViewsCategorySlugResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
