//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PutReactionsParamsReaction.
const (
	Like      PutReactionsParamsReaction = "like"
	Love      PutReactionsParamsReaction = "love"
	Mindblown PutReactionsParamsReaction = "mindblown"
	Puzzling  PutReactionsParamsReaction = "puzzling"
)

// GetReactionsParams defines parameters for GetReactions.
type GetReactionsParams struct {
	// Path The path of the content.
	Path string `form:"path" json:"path"`
}

// PutReactionsParams defines parameters for PutReactions.
type PutReactionsParams struct {
	// Path The path of the content.
	Path string `form:"path" json:"path"`

	// Reaction The reaction type.
	Reaction PutReactionsParamsReaction `form:"reaction" json:"reaction"`
}

// PutReactionsParamsReaction defines parameters for PutReactions.
type PutReactionsParamsReaction string

// GetViewsParams defines parameters for GetViews.
type GetViewsParams struct {
	// Path The path of the content.
	Path string `form:"path" json:"path"`
}

// PutViewsParams defines parameters for PutViews.
type PutViewsParams struct {
	// Path The path of the content.
	Path string `form:"path" json:"path"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get reaction counts
	// (GET /reactions)
	GetReactions(w http.ResponseWriter, r *http.Request, params GetReactionsParams)
	// Increment reaction count
	// (PUT /reactions)
	PutReactions(w http.ResponseWriter, r *http.Request, params PutReactionsParams)
	// Get view count
	// (GET /views)
	GetViews(w http.ResponseWriter, r *http.Request, params GetViewsParams)
	// Increment view count
	// (PUT /views)
	PutViews(w http.ResponseWriter, r *http.Request, params PutViewsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetReactions operation middleware
func (siw *ServerInterfaceWrapper) GetReactions(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetReactionsParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetReactions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutReactions operation middleware
func (siw *ServerInterfaceWrapper) PutReactions(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PutReactionsParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Required query parameter "reaction" -------------

	if paramValue := r.URL.Query().Get("reaction"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "reaction"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "reaction", r.URL.Query(), &params.Reaction)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reaction", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutReactions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetViews operation middleware
func (siw *ServerInterfaceWrapper) GetViews(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetViewsParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetViews(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutViews operation middleware
func (siw *ServerInterfaceWrapper) PutViews(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PutViewsParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutViews(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/reactions", wrapper.GetReactions)
	m.HandleFunc("PUT "+options.BaseURL+"/reactions", wrapper.PutReactions)
	m.HandleFunc("GET "+options.BaseURL+"/views", wrapper.GetViews)
	m.HandleFunc("PUT "+options.BaseURL+"/views", wrapper.PutViews)

	return m
}

type GetReactionsRequestObject struct {
	Params GetReactionsParams
}

type GetReactionsResponseObject interface {
	VisitGetReactionsResponse(w http.ResponseWriter) error
}

type GetReactions200JSONResponse struct {
	Like      *int `json:"like,omitempty"`
	Love      *int `json:"love,omitempty"`
	Mindblown *int `json:"mindblown,omitempty"`
	Puzzling  *int `json:"puzzling,omitempty"`
}

func (response GetReactions200JSONResponse) VisitGetReactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetReactions401Response struct {
}

func (response GetReactions401Response) VisitGetReactionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PutReactionsRequestObject struct {
	Params PutReactionsParams
}

type PutReactionsResponseObject interface {
	VisitPutReactionsResponse(w http.ResponseWriter) error
}

type PutReactions200JSONResponse struct {
	Like      *int `json:"like,omitempty"`
	Love      *int `json:"love,omitempty"`
	Mindblown *int `json:"mindblown,omitempty"`
	Puzzling  *int `json:"puzzling,omitempty"`
}

func (response PutReactions200JSONResponse) VisitPutReactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutReactions401Response struct {
}

func (response PutReactions401Response) VisitPutReactionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetViewsRequestObject struct {
	Params GetViewsParams
}

type GetViewsResponseObject interface {
	VisitGetViewsResponse(w http.ResponseWriter) error
}

type GetViews200JSONResponse struct {
	Views *int `json:"views,omitempty"`
}

func (response GetViews200JSONResponse) VisitGetViewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetViews401Response struct {
}

func (response GetViews401Response) VisitGetViewsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PutViewsRequestObject struct {
	Params PutViewsParams
}

type PutViewsResponseObject interface {
	VisitPutViewsResponse(w http.ResponseWriter) error
}

type PutViews200JSONResponse struct {
	Views *int `json:"views,omitempty"`
}

func (response PutViews200JSONResponse) VisitPutViewsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutViews401Response struct {
}

func (response PutViews401Response) VisitPutViewsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get reaction counts
	// (GET /reactions)
	GetReactions(ctx context.Context, request GetReactionsRequestObject) (GetReactionsResponseObject, error)
	// Increment reaction count
	// (PUT /reactions)
	PutReactions(ctx context.Context, request PutReactionsRequestObject) (PutReactionsResponseObject, error)
	// Get view count
	// (GET /views)
	GetViews(ctx context.Context, request GetViewsRequestObject) (GetViewsResponseObject, error)
	// Increment view count
	// (PUT /views)
	PutViews(ctx context.Context, request PutViewsRequestObject) (PutViewsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetReactions operation middleware
func (sh *strictHandler) GetReactions(w http.ResponseWriter, r *http.Request, params GetReactionsParams) {
	var request GetReactionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetReactions(ctx, request.(GetReactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetReactions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetReactionsResponseObject); ok {
		if err := validResponse.VisitGetReactionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutReactions operation middleware
func (sh *strictHandler) PutReactions(w http.ResponseWriter, r *http.Request, params PutReactionsParams) {
	var request PutReactionsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutReactions(ctx, request.(PutReactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutReactions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutReactionsResponseObject); ok {
		if err := validResponse.VisitPutReactionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetViews operation middleware
func (sh *strictHandler) GetViews(w http.ResponseWriter, r *http.Request, params GetViewsParams) {
	var request GetViewsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetViews(ctx, request.(GetViewsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetViews")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetViewsResponseObject); ok {
		if err := validResponse.VisitGetViewsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutViews operation middleware
func (sh *strictHandler) PutViews(w http.ResponseWriter, r *http.Request, params PutViewsParams) {
	var request PutViewsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutViews(ctx, request.(PutViewsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutViews")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutViewsResponseObject); ok {
		if err := validResponse.VisitPutViewsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
